import * as React from 'react';
import { GridHydrateRowsValue } from '../rows/gridRowsInterfaces.ts';
import { GridRowId, GridRowModel } from '../../../models/gridRows';
import { GridPrivateApiCommunity } from '../../../models/gridApiCommunity';
import { GridPinnedRowsProp } from './gridRowPinningInterface';

type GridPinnedRowPosition = keyof GridPinnedRowsProp;
export declare function addPinnedRow({ groupingParams, rowModel, rowId, position, apiRef, isAutoGenerated, }: {
    groupingParams: GridHydrateRowsValue;
    rowModel: GridRowModel;
    rowId: GridRowId;
    position: GridPinnedRowPosition;
    apiRef: React.MutableRefObject<GridPrivateApiCommunity>;
    isAutoGenerated: boolean;
}): {
    dataRowIdToModelLookup: {
        [x: string]: import("../../../models/gridRows").GridValidRowModel;
    };
    dataRowIdToIdLookup: {
        [x: string]: GridRowId;
    };
    tree: {
        [x: string]: import("../../../models/gridRows").GridTreeNode;
        [x: number]: import("../../../models/gridRows").GridTreeNode;
    };
    treeDepths: {
        [x: number]: number;
    };
    dataRowIds: GridRowId[];
    additionalRowGroups?: {
        pinnedRows?: import("../rows/gridRowsInterfaces").GridPinnedRowsState | undefined;
    } | undefined;
};
export declare const useGridRowPinningPreProcessors: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>) => void;
export {};



